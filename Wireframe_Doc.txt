Financial Forecasting Dashboard: Wireframe Document
Goal: To provide a dynamic interface for analyzing historical revenue, configuring a Prophet forecasting model, visualizing future trends, and assessing model performance.

The application allows users to interactively:
1.  **Configure a time-series forecast** (number of months, confidence interval, seasonality).
2.  **Apply a "What-if" scenario** (simulating a future percentage change in revenue).
3.  **Visualize historical and forecasted revenue** using interactive Plotly charts (daily, monthly, cumulative).
4.  **Analyze core and growth KPIs** (Total Revenue, Avg. Daily Revenue, CAGR, MoM/YoY growth).
5.  **Evaluate model performance** using metrics like MAE, RMSE, WAPE, and Forecast Bias.
6.  **View automated insights and recommendations** based on the forecast's projected growth (CAGR).
7.  **Deep Dive** into seasonality, volatility, and anomaly detection.

Here is a structured summary of the key components and functionalities:

***

## ‚öôÔ∏è Key Components and Libraries

| Component | Purpose | Details |
| :--- | :--- | :--- |
| **Streamlit** | Main Framework | Creates the interactive, data-driven web application and UI. |
| **Prophet** (from Meta) | Forecasting Engine | Used to train a time-series model on historical revenue (`ds`, `y`) and generate future forecasts (`yhat`, `yhat_lower`, `yhat_upper`). |
| **Snowflake** | Database Integration | Connects to a Snowflake instance (using `st.secrets`) to fetch historical data from `financial_forecast` and persist the generated forecast to `financial_forecast_output`. |
| **Pandas** | Data Handling | Used for data cleaning, transformation, aggregation (e.g., monthly grouping, moving averages), and KPI calculations. |
| **Plotly Graph Objects** | Visualization | Generates all the interactive charts (Historical Trend, Daily Forecast, Cumulative Trend, Model Components, Seasonality). |
| **Custom CSS/HTML** | Styling & UX | Applies custom styling for a modern look, defines KPI card styles, and creates a floating chat widget using JavaScript. |

***

## üìä Core Functionalities by Tab

### 1. üìä Forecast Tab

This is the main dashboard focusing on the output of the forecast.

* **Data Source:** Fetches historical data from Snowflake (`financial_forecast` table) and the generated forecast from the `financial_forecast_output` table (which is updated on every run).
* **KPIs (Key Performance Indicators):**
    * **Historical:** Total Revenue, Avg. Daily Revenue, Historical CAGR.
    * **Forecasted:** Total Revenue, Avg. Daily Revenue, Forecasted CAGR (includes delta comparison vs. Historical).
* **Growth Metrics:** Visualizes **Monthly Revenue** with **MoM (Month-over-Month)** and **YoY (Year-over-Year)** growth figures for both historical and forecasted periods.
* **Charts:**
    * **Historical Revenue & Moving Average:** Shows past trends.
    * **Daily Revenue Forecast:** Combines historical data with the daily forecast, including the user-selected confidence interval (upper/lower bounds).
    * **Cumulative Revenue Trend:** Tracks total revenue accumulation over time for comparison.
* **What-If Scenario:** The user's percentage change input in the sidebar is applied directly to the base forecast (`yhat`) to create a `yhat_what_if` column, which is used if the feature is enabled.

### 2. üìà Model Performance Tab

Focuses on validating the quality of the Prophet model.

* **Error Metrics:** Calculates and displays key performance indicators based on the model's performance on historical data:
    * **MAE** (Mean Absolute Error)
    * **RMSE** (Root Mean Squared Error)
    * **WAPE** (Weighted Absolute Percentage Error)
    * **Forecast Bias**
* **Time Series Components:** Renders the Prophet component plots showing the **Trend**, **Yearly Seasonality**, and **Weekly Seasonality** extracted by the model.

### 3. üìö Insights & Recommendations Tab

Provides a high-level summary and actionable business advice.

* **Summary:** Lists the total revenue and CAGR for historical and forecasted periods.
* **Automated Recommendation:** Generates a dynamic text recommendation based on the **Forecasted CAGR** (e.g., "Expand" for high growth, "Optimize" for decline). It also considers **Volatility** and **Anomaly Detection**.
* **Actionable Next Steps:** Provides a bulleted list of suggested business actions (e.g., adjust inventory, focus on cost optimization) derived from the forecast's characteristics.

### 4. üí° Deep Dive Analysis Tab

Offers advanced technical and financial analyses.

* **Revenue Momentum:** Calculates 7-day, 30-day, and 90-day growth rates.
* **Seasonality Insights:** Displays bar charts for **Average Revenue by Day of Week** and **Month of Year** to reveal underlying patterns.
* **Seasonal Strength Index:** Quantifies the percentage of revenue variability explained by seasonality versus trend and noise.
* **Risk & Volatility:** Plots the **Revenue Volatility Index (30-day Rolling)** and **Revenue Drawdown from Peak (%)** to assess risk.
* **Anomaly Detection:** Flags historical data points that are more than 3 standard deviations away from the model's prediction.
* **Financial KPI Insights:** Calculates **Annual Run-Rate (ARR)** and tracks **Growth Target Tracking**.

***

## üõ†Ô∏è Code Structure Highlights

* **Configuration:** Defines constants for file paths, sets the Streamlit page layout (`st.set_page_config`).
* **Helper Functions:** Includes `get_image_base64` for encoding images and `safe_cagr` for calculating the Compound Annual Growth Rate robustly.
* **Sidebar:** Controls for `forecast_months`, `confidence_interval`, seasonality toggles, and the **What-if Scenario** percentage.
* **Snowflake Connection:** Establishes connection using `st.secrets`, fetches the historical data, and saves the new forecast back to a dedicated output table using `snowflake.connector.pandas_tools.write_pandas`.
* **Custom HTML/CSS:** Injects styling for KPI cards, sidebar, and overall theme.
* **Chat Overlay:** Includes a self-contained JavaScript snippet at the end of the script to create a floating chat assistant overlay via a Shadow DOM.
